// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// Client for operations API
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetExport(params *GetExportParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetExportOK, error)

	GetQuery(params *GetQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetQueryOK, error)

	GetStatus(params *GetStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatusOK, error)

	PostImport(params *PostImportParams, authInfo runtime.ClientAuthInfoWriter) (*PostImportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

// GetExport get export API
func (a *Client) GetExport(params *GetExportParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExport",
		Method:             "GET",
		PathPattern:        "/pdb/admin/v1/archive",
		ProducesMediaTypes: []string{"application/gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExportReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetExportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// GetQuery get query API
func (a *Client) GetQuery(params *GetQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQuery",
		Method:             "GET",
		PathPattern:        "/pdb/query/v4",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// GetStatus get status API
func (a *Client) GetStatus(params *GetStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatus",
		Method:             "GET",
		PathPattern:        "/status/v1/services",
		ProducesMediaTypes: []string{"text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// PostImport post import API
func (a *Client) PostImport(params *PostImportParams, authInfo runtime.ClientAuthInfoWriter) (*PostImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postImport",
		Method:             "POST",
		PathPattern:        "/pdb/admin/v1/archive",
		ProducesMediaTypes: []string{"text/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
