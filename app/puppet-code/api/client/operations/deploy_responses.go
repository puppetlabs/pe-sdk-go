// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/pe-sdk-go/app/puppet-code/api/models"
)

// DeployReader is a Reader for the Deploy structure.
type DeployReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeployReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeployOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDeployDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeployOK creates a DeployOK with default headers values
func NewDeployOK() *DeployOK {
	return &DeployOK{}
}

// DeployOK describes a response with status code 200, with default header values.
//
// deploy command result
type DeployOK struct {
	Payload []*DeployOKBodyItems0
}

func (o *DeployOK) Error() string {
	return fmt.Sprintf("[POST /deploys][%d] deployOK  %+v", 200, o.Payload)
}
func (o *DeployOK) GetPayload() []*DeployOKBodyItems0 {
	return o.Payload
}

func (o *DeployOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeployDefault creates a DeployDefault with default headers values
func NewDeployDefault(code int) *DeployDefault {
	return &DeployDefault{
		_statusCode: code,
	}
}

// DeployDefault describes a response with status code -1, with default header values.
//
// Unexpected error
type DeployDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the deploy default response
func (o *DeployDefault) Code() int {
	return o._statusCode
}

func (o *DeployDefault) Error() string {
	return fmt.Sprintf("[POST /deploys][%d] Deploy default  %+v", o._statusCode, o.Payload)
}
func (o *DeployDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeployDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// DeployBody deploy body
// swagger:model DeployBody
type DeployBody struct {

	// deploy all
	DeployAll bool `json:"deploy-all,omitempty"`

	// dry run
	DryRun bool `json:"dry_run,omitempty"`

	// environments
	Environments []string `json:"environments,omitempty"`

	// wait
	Wait bool `json:"wait,omitempty"`
}

// Validate validates this deploy body
func (o *DeployBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this deploy body based on context it is used
func (o *DeployBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeployBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeployBody) UnmarshalBinary(b []byte) error {
	var res DeployBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeployOKBodyItems0 deploy o k body items0
// swagger:model DeployOKBodyItems0
type DeployOKBodyItems0 struct {

	// The commit SHA of the control repo that Code Manager used to deploy code in that environment.
	DeploySignature string `json:"deploy-signature,omitempty"`

	// The name of the environment queued or deployed.
	Environment string `json:"environment,omitempty"`

	// error
	Error *models.Error `json:"error,omitempty"`

	// Commit SHAs used internally by file sync to identify the code synced to the code staging directory
	FileSync interface{} `json:"file-sync,omitempty"`

	// Identifies the queue order of the code deploy request.
	ID int64 `json:"id,omitempty"`

	// The status of the code deployment for that environment.
	Status string `json:"status,omitempty"`
}

// Validate validates this deploy o k body items0
func (o *DeployOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeployOKBodyItems0) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deploy o k body items0 based on the context it is used
func (o *DeployOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeployOKBodyItems0) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeployOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeployOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res DeployOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
